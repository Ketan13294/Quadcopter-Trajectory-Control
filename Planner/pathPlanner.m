%% create an occupancy map from an example map
function waypts = pathPlanner(start,goal,plt)
    map = load("exampleMaps.mat").simpleMap;
    map = occupancyMap(map,3); %map resolution 5 cells/meter
    %% create a state space
    ss = stateSpaceSE2;
    ss.StateBounds = [map.XWorldLimits; map.YWorldLimits; [0 0]];
    
    %% create state validator
    sv = validatorOccupancyMap(ss,Map=map);
    sv.ValidationDistance = 0.01;
    
    %% Create prm object
    planner = plannerRRTStar(ss,sv);
    planner.ContinueAfterGoalReached = true;
    planner.MaxIterations = 2500;
    planner.MaxConnectionDistance = 0.4;
    planner.GoalReachedFcn = @test_function;

%     specify start and goal states  
    %% Plan path with default setting. Using rng seed for repeatibility
    rng(100,"twister");
    [pthObj, solnInfo] = plan(planner,start,goal)
    
    %% Visualize results
    waypts = [];
    
    if solnInfo.IsPathFound
        waypts = pthObj.States(:,1:2);
    else
        disp("Path not found")
    end
    
    %% Optimize path
    inpath = pthObj.States;
    options = optimizePathOptions;
    options.MinTurningRadius = 2; % minimum turning radius (same as in the planner)
    options.MaxPathStates = size(inpath,1) * 3; %maximum number of poses allowed in the optimized path
    options.ObstacleSafetyMargin = 0.5; % safe distance of 0.75 meters from the obstacles.
    optpath = optimizePath(inpath,map,options); %Optimize the path generated by the planner.
    waypts = optpath(:,1:2)';
    step=6;
    waypts = [smoothdata(waypts(1,1:step:end));zeros(size(waypts(1,1:step:end)));smoothdata(waypts(2,1:step:end))];
    waypts = [waypts [optpath(end,1);0;optpath(end,2)]];
    %%
    if plt ==1
        hold on
        show(map)
        plot3(solnInfo.TreeData(:,1),solnInfo.TreeData(:,2),solnInfo.TreeData(:,3),'.-'); % tree expansion
        plot3(pthObj.States(:,1),pthObj.States(:,2),pthObj.States(:,3),'r-','LineWidth',2) % draw path
        plot(optpath(1:step:end,1),optpath(1:step:end,2),'k--','LineWidth',2.0)
        plot(goal(1),goal(2),"g*")
        plot(start(1),start(2),"r*")
        hold off
    end
end

function isReached = test_function(planner,currentState,goalState)
    if norm(currentState(1:2)-goalState(1:2)) < 0.01
        isReached = 1;
    else isReached = 0;
    end
end


